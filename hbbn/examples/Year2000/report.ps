%!PS-Adobe-2.0
%%Creator: dvips(k) 5.86d Copyright 1999 Radical Eye Software
%%Title: report.dvi
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips report.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2000.07.07:1047
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks 97 - Version 97, 93/05/07.
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    (P) 0 get /BoldPentagon put
  /Metrics 13 dict def
  Metrics begin
    /Bullet 1000 def
    /Circle 1000 def
    /BoldCircle 1000 def
    /SolidTriangle 1344 def
    /Triangle 1344 def
    /BoldTriangle 1344 def
    /SolidSquare 886 def
    /Square 886 def
    /BoldSquare 886 def
    /SolidPentagon 1093.2 def
    /Pentagon 1093.2 def
    /BoldPentagon 1093.2 def
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle { -550 -550 550 550 } def
    /BoldCircle /Circle load def
    /Bullet /Circle load def
    /Triangle { -571.5 -330 571.5 660 } def
    /BoldTriangle /Triangle load def
    /SolidTriangle /Triangle load def
    /Square { -450 -450 450 450 } def
    /BoldSquare /Square load def
    /SolidSquare /Square load def
    /Pentagon { -546.6 -465 546.6 574.7 } def
    /BoldPentagon /Pentagon load def
    /SolidPentagon /Pentagon load def
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath { 0 0 500 0 360 arc closepath } def
    /Bullet { 500 500 Adjust CirclePath fill } def
    /Circle { 500 500 Adjust CirclePath .9 .9 scale CirclePath eofill } def
    /BoldCircle { 500 500 Adjust CirclePath .8 .8 scale CirclePath eofill } def
    /BoldCircle { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath {
      0  660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath
    } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath {
      -450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
      closepath
    } def
    /SolidSquare { SquarePath fill } def
    /Square { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon { PentagonPath .78 .78 scale PentagonPath eofill } def
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
% END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 39158280 55380996 1000 600 600 (report.dvi)
@start
%DVIPSBitmapFont: Fa cmr8 8 18
/Fa 18 122 df<B612FCEDFF8016E03A03FC000FF80001EC03FC6F7E6F7E821780A61700
5E5E4B5AED07F8ED1FF090B612C05E16F09039FC0007F8ED01FE6F7EEE7F80163F17C016
1F17E0A6EE3FC0A2EE7F80EEFF005D0003EC07FCB75A16E093C7FC2B2D7EAC32>66
D<B712FEA33903FC00030001EC007F828282A282A392381C0380A493C7FC153CA215FC90
B5FCA3EBFC00153CA2151C17E0A3EE01C01500A31603A217801607160F161F163F0003EC
01FFB81200A32B2D7EAC30>69 D<90383F80303901FFF07048EBFCF0380FC07E381F000F
001E1307481303007C1301127800F81300A21570A27EA26C1400127F7FEA3FF8EBFF806C
13F86C13FE6C7F6C14C0C614E0130F010013F0EC0FF814031401EC00FCA20060147C12E0
A46C1478A26C14F07E6CEB01E039FF8003C039F7F00F8000F1B5120038E07FFE38C00FF0
1E2F7CAD27>83 D<007FB712F8A39039800FE007D87E00140000781678A20070163800F0
163CA348161CA5C71500B3A74A7E011FB512F0A32E2D7EAC33>I<B5D8F801B5FCA3D803
FEC7EA1FF06C48EC07C0EE0380B3AB0000ED07007F137E160E6D5C6D7E010F1478D907E0
5B903903F807E00100B51280023F90C7FCEC07F8302E7EAC35>I<EB7F803803FFE0000F
13F848C67E143E383F803FEC1F80A2391F000FC0120EC7FCA3EB07FF137F3803FF8F3807
F80FEA1FE0EA3F8013005A00FE14C7A4141F127F1477393FC1E7FE381FFFC30007EB81FC
3901FC00F020207E9E23>97 D<EB1FE0EB7FF83801FFFE3803F01FEA07E0390FC03F80EA
1F80130048EB1F0048130E91C7FC127E12FEA8127E127FA26CEB01C01380001FEB0380EA
0FC03907E007003803F81E3801FFFC6C6C5AEB1FC01A207E9E1F>99
D<EB1F80EBFFF0487F3803F0FC3807C03E380F803F48487E481480140F127E15C0A212FE
B6FCA348C8FCA4127EA2127F6CEB01C0A2391F800380EA0FC03907E007003803F81E3801
FFFC6C6C5AEB1FC01A207E9E1F>101 D<EA0780EA0FC0EA1FE0A4EA0FC0EA0780C7FCA8
EA03E012FFA3120F1207B3A4EAFFFEA30F2E7FAD13>105 D<EA03E012FFA3120F1207AC
EC1FFFA3EC0FF015C092C7FC141E5C5C14E0EBE3C0EBE7E013EFEBFFF0EBFDF8EBF8FCEB
E07C147E806E7E140F816E7E6E7E8181B5380FFFC0A3222E7FAD25>107
D<EA03E012FFA3120F1207B3B3A2B5FCA3102E7FAD13>I<3903E03F8000FFEBFFE001E3
7F9038E781F8390FEE00FCEA07FC49137E5BA25BB2B5380FFFF0A3241E7F9D27>110
D<EB1FE0EB7FF83801FFFE3803F03F3907C00F80390F8007C0391F0003E04814F0A2007E
EB01F8A300FE14FCA9007E14F8A26CEB03F0A26C14E0EB8007390FC00FC03907F03F8039
01FFFE0038007FF8EB1FE01E207E9E23>I<3803E07F39FFE3FFE001E77F9038FF03F839
0FFC00FC6C48137E497F491480151F16C0A2ED0FE0A816C0151FA21680153F6DEB7F006D
137E6D5B9038EF03F89038E7FFF001E313C0D9E07FC7FC91C8FCA9B5FCA3232B7F9D27>
I<3807C1F038FFC7FCEBCFFEEBDE7FEA0FD8EA07F8EBF03E141C14005BB17FB51280A318
1E7E9D1C>114 D<3801FE183807FFB8001F13F8EA3F01EA7C000078137800F81338A37E
6C13006C7EEA7FFC383FFF806C13E06C13F06C13F8C613FC1307EB00FE0060137E00E013
3EA27EA26C133C147C6C137838FF01F038F7FFE000E313C000C0130017207E9E1C>I<13
E0A41201A31203A21207120F121FB512F0A33807E000AE1438A70003137013F03801F8E0
EA00FFEB7FC0EB1F00152A7FA81B>I<3AFFFE03FFC0A33A07F000FE00157800031470A2
6C6C5BA2EBFC0100005CEBFE03017E5BA26D48C7FCA2148FEB1F8EA2EB0FDCA214FC6D5A
A26D5AA36D5AA25CA213035C1238D87C07C8FC12FE130E131E485AEA7878EA7FF06C5AEA
0F80222B7F9C25>121 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmr9 9 23
/Fb 23 122 df<15E04A7EA34A7EA34A7EA3EC0EFEA3EC1C7FA34A6C7EA202787FEC701F
A202F07FECE00FA2010180ECC007A2010380EC8003A249486C7EA3010E6D7E010FB5FCA2
4980011CC77EA2496E7EA20178810170141FA201F08149140FA20001821607487ED80FF8
4A7EB549B512E0A333367DB53A>65 D<B7FC16E016F83A03FC0003FE0001EC00FFEE7F80
EE3FC0161FEE0FE0A217F0A617E0161F17C0EE3F80EE7F00ED01FEED07FC90B612F05E16
FC9039FC0001FE9238007F80EE1FC017E0EE0FF0160717F8160317FCA617F81607A2EE0F
F0EE1FE0163FEE7FC00003913803FF00B75A16F816C02E337DB236>I<B812C0A3D803FC
C7FC0001151FEE07E01603A21601A21600A4030E1370A41700151EA2153E15FE90B5FCA3
EBFC00153E151EA2150E171CA3173892C7FCA41778A2177017F01601A21607160F000315
7FB812E0A32E337DB234>69 D<B612FCEDFF8016F03A01FE0007FC0000EC01FEED007F70
7E707E83160F83A75F161F5F4C5A4CC7FCED01FEED07FC90B612F01680829039FE001FE0
ED03F06F7E6F7E82167E167FA683A4181CA2EE3FC0A2486C021F1338B500FE14E093380F
F070933803FFE0C96C13C09338003F8036357EB239>82 D<90381FE00390387FFC0748B5
FC3903F01F8F39078003DF48C7B4FC001E804880A24880A200F880A381A27EA2007E91C7
FC127F13C0EA3FF013FF6C13F06C13FF6C14C06C80C614F8013F7F01037FEB003FEC03FF
1400ED3F80151F16C0150F126000E01407A47E1680A26C140F16006C5C6C141E6C6C5BD8
FBE013F839F1FC03F000E0B55A011F138026C003FEC7FC22377CB42B>I<007FB712FEA3
9039C007F001D87E00EC007E007C163E0078161E170E127000F0160FA3481607A6C71500
B3AB4A7E011FB512FCA330337DB237>I<B500FE90383FFFF8A3000190C7000113006C48
EC007C1738B3AF017E5DA2137F7F5F6D7E4C5A6D6C495A6D6C49C7FC6D6C130E6D6C133C
9039007F01F86EB45A020F13C0DA01FEC8FC35357EB23A>I<EB7F803803FFF04813FC38
0F80FE381F003F486C6C7E6D6C7EA26E7EEA1F80EA0F00C7FCA3EB03FF133F3801FFC738
03FC07EA0FE0EA1FC0EA3F80EA7F00A200FEECE1C0A4140FA2007F131B393F8033F33A1F
C0E1FF80260FFFC113006CEB80FE3900FE007C22237DA126>97 D<EA03F012FFA3120712
03AEEC3FC0ECFFF001F313FC9038F7C0FE9038FE003F49EB1F8049EB0FC05BED07E0A216
F01503A216F8A816F0A2150716E0A26DEB0FC016806DEB1F0001EE133E9038C781FC9038
C3FFF8018113E0C7EA3F8025357EB32B>I<EB07F8EB3FFF90B512803901FC07C03903F0
03E03907E007F0380FC00FEA1F80A2393F0007E0EC03C04890C7FC127EA212FEA8127E12
7FA26C14387F001F14706C7E6C6C13E03903F001C03901FE07806CB51200EB3FFEEB07F0
1D237EA122>I<EB0FE0EB7FFC497E3801F83F3903E00F803907C007C0390F8003E0121F
D83F0013F014015A007E14F8A212FEB6FCA348C8FCA5127E127FA26C14386C7E15706C7E
6C6C13E03903F001C03901FE07806CB51200EB3FFEEB07F01D237EA122>101
D<1207EA0F80EA1FC0EA3FE0A3EA1FC0EA0F80EA0700C7FCA9EA07E012FFA3120F1207B3
A6EA0FF0B5FCA310337EB215>105 D<EA03F012FFA312071203AF913807FFE0A36E1300
EC01F8EC03E05D4A5A020EC7FC143C5C5C13F1EBF3F813F7EBFEFCEBFC7EEBF83E497E81
6E7E1407816E7E1401816E7E81486C7FB500C313F0A324347EB329>107
D<EA07E012FFA3120F1207B3B3A7EA0FF0B5FCA310347EB315>I<2703F01FE013FF00FF
90267FF80313C04A6C487F903BF3C0FE1E07F03C07F7003F3801F8D803F6143001FC9039
1FE000FC495CA3495CB3486C496C487EB53BC7FFFE3FFFF0A33C217EA041>I<3903F01F
C000FFEB7FF09038F1FFF89038F3C0FC3907F7007EEA03FE497F5BA35BB3486CEB7F80B5
38C7FFFCA326217EA02B>I<EB07F0EB3FFE90B57E3901F80FC03903E003E048486C7E48
486C7E001F8090C7127C48147E003E143E007E143FA300FE1580A8007E1500A2007F5C6C
147EA26C6C5BA26C6C485A6C6C485A3903F80FE0C6B51280D93FFEC7FCEB07F021237EA1
26>I<3903F03FC000FFEBFFF001F313FC9038F7C0FE3907FE007F6C48EB3F8049EB1FC0
49130F16E0150716F0A2150316F8A816F01507A216E0150F6D14C0ED1F806DEB3F006D13
7E9038F781FC9038F3FFF801F113E09038F03F8091C8FCAA487EB512C0A325307EA02B>
I<3803E07C00FF13FF01E113809038E39FC03807E71FEA03EE9038EC0F809038FC070049
C7FCA35BB2487EB512E0A31A217FA01E>114 D<EBFF06000713CE4813FEEA1F00003C13
3E007C131E127800F8130EA37E6C90C7FCEA7F8013F86CB47E6C13E06C13F86C7F00017F
38000FFF1300EC3F800060131F12E0140F7EA27E15006C5B6C133E38FF80FC38F7FFF800
E113E038C07F8019237EA11E>I<1370A513F0A31201A212031207120F121FB512FEA338
03F000AF1407A8140EEA01F8A23800FC1CEB7FF8EB3FF0EB0FC0182F7FAD1E>I<B53801
FFF0A33A0FF0007F806C48EB1F006D131E0003141C153C6C6C1338A26D137800001470A2
017E5BA2EB7F01013F5BA290381F8380A214C7010F90C7FCA2EB07EEA214FE6D5AA26D5A
A36D5AA224217E9F29>118 D<3A7FFF80FFF8A33A07F8003FC06C48EB1F806C6CEB0F00
150E6D131E0000141CA2017E5BA2017F13786D1370A26D6C5AA214C1010F5B14E301075B
A2D903F7C7FCA214FF6D5AA26D5AA31478A21470A214F05CA2495A127CEAFE035C49C8FC
5BEAFC1EEA783CEA3FF86C5AEA07C025307F9F29>121 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmr10 10 2
/Fc 2 51 df<EB01C013031307131F13FFB5FCA2131F1200B3B3A8497E007FB512F0A31C
3879B72A>49 D<EB0FF0EB7FFE48B57E3903E03FC03907800FE0390E0007F0486D7E4880
6E7E5A6E7E127CB4FC16807F157FA26CC7FCA2001C14FFC8FC1600A25C5D5D14035D4A5A
4A5A5D4A5A4AC7FC143E5C5C495A495A495A5C49C8FC011EEB03805B5B49130748481400
5B485A48C75A48B6FC5A5A485CB6FCA321387CB72A>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd cmbx9 9 22
/Fd 22 122 df<ED1F80A24B7EA24B7EA34B7EA24A7FA34A7FA24A7F15DFA2020F7F158F
021F801507023F80143E81027E80EC7C0102FC804A7EA20101814A137F0103814A133FA2
01078191B6FC4981A2498291C7120F824982013E80017E82137C8201FC824980B500F001
7FEBFFF0A43C347DB343>65 D<B712FEEEFFE017F817FEC69039E0001FFF040713807013
C08218E0A27013F0A64C13E0A24C13C0A24C138093381FFE0091B65A17F05F17FC9139E0
003FFF04071380040113C018E07013F0EF7FF8A318FCA718F817FF18F05E4C13E0040F13
C0B912005F17F0178036337DB23F>I<B812FEA4C69038F0001FEE03FF82828383A283A3
DB03E01380170FA4030790C7FCA2150F153F91B5FCA4ECF03F150F1507EF01F01503A2EF
03E0A392C7FCA21707A2EF0FC0A2171F173F177FEE01FF160FB91280A434337DB23A>69
D<B712E016FF17C017F0C6D9F00013FCEE1FFE707E707F848284A7605E604C90C7FC4C5A
EEFFFC91B612F017C094C8FC83DAF00313E003007F707E163F83161F83A583A4197CA270
1380A2F0C0F8B6D8F00713E170EBFFF0040014E0053F13C0CA000313003E347DB242>82
D<D90FFC133090397FFF80F048B512E14814FB3907F807FF380FE000D81F80133F003F14
1F90C7120F481407A2481403A215017FA27F01F090C7FC13FF6C13F0ECFF8015F06C14FC
6C80816C15806C15C0000115E06C15F0133F010714F8EB003F14019138003FFC151F150F
0078140712F81503A36C15F8A27EED07F07E01C0EB0FE001F0EB1FC001FFEB7F8000FD90
B51200D8F87F5BD8F01F13F8D8C00113C026357BB331>I<003FB812F8A4D9F803EBC03F
D87FC0ED07FC0180150301001501007E1600A2007C177CA400FC177E48173EA4C71600B3
A9011FB612F8A437327DB13E>I<B600F090B512F8A4C601F0C8EAF800B3B0017F4B5AA2
6D7E4D5A131F6E4A5A6D6C140F6D6C4A5A6D6D017FC7FC6D9038F007FE6D6CB512F8021F
14E0020314809126003FFCC8FC3D347DB244>I<EB7FFE0003B512E04814F84880391FF8
0FFEEC03FF6E13808016C06C5A6C5AEA0180C8FC91B5FC131F48B6FC000713F8481300EA
1FFCEA3FF0485A485AA56C6C5A5C263FF81F13E06CB5EA7FFF6C497E0003EBF81F39007F
C00728217EA02B>97 D<903807FF80013F13F090B512FC48800007EB03FFEA0FFCEA1FF8
13F0123F6E5A48486C5A153000FF91C7FCA9127F7F123FED0F806C7E6DEB1F006C6C5B39
07FF80FE0001EBFFFC6C14F0013F5B010790C7FC21217DA027>99
D<EB03FF011F13F0017F13FC48B57E0007EB01FF260FFC0013804848EB7FC049133F003F
EC1FE0A2485A16F0A2B7FCA401E0C8FCA3127FA27F123FED01F06C7E6C6C13036C6CEB07
E03A03FFC01FC06C90B512806C6C1400011F13FC010113C024217EA029>101
D<EA01F0EA07FC487EA2487EA56C5AA26C5AEA01F0C8FCA713FE12FFA4120F1207B3A5B5
12E0A413357DB419>105 D<EA01FE12FFA4120F1207AD92387FFF80A492381FE0004B5A
03FFC7FC4A5A4A5AEC07F0EC1FE04A5A4A5A90B57EA2818181ECBFFC141F9038FC0FFE6E
7E6E7F826E7F806F7E6F7E82B500E0B512E0A42B347EB32F>107
D<13FE12FFA4120F1207B3B3A6B512F0A414347DB319>I<2801FC01FF80EBFFC000FF01
07D9E00313F0021FD9F80F13FC027FD9FC3F7F913BFC0FFE7E07FF270FFDF007EBF8033C
07FFC003FFE001028002C0148002001480A2491500B3B5D8F07FD9F83F13FCA446217DA0
4B>I<3901FC01FF00FF010F13E04A7F027F7F9138FC1FFC390FFDE00F6CB4486C7E1480
1400A25BB3B500F0B512F0A42C217DA031>I<903803FF80011F13F090B512FE48800007
010113C03A0FFC007FE04848EB3FF049131F003F15F849130F007F15FCA300FF15FEA800
7F15FCA36C6CEB1FF8001F15F06D133F6C6CEB7FE03A07FF01FFC0000190B512006C5C01
3F13F80103138027217EA02C>I<9038FE07FE00FF90383FFFC090B612F0829138F01FFC
000F9038C007FE6C90380003FF4915808117C0A28117E0A94B13C0A34B138017006D5B91
38C00FFE9138F03FFC91B55A4914E0023F1380DA07FCC7FC91C9FCABB512F0A42B307EA0
31>I<3901FC1F8000FFEB7FF0ECFFF801FD13FCECE7FE380FFFC76C1387A21407EC03FC
EC01F89038FE00601500B1B512F8A41F217EA024>114 D<9038FFE1C0000313FF120F5A
383F803F387F000F007E130712FEA26C90C7FC13E013FF14F06C13FC6C13FF15806C14C0
12076C14E0C66C13F01303EB001F0078130F00F813077E15E07E6C130F9038C03FC090B5
1280150000F913FC38E03FE01C217DA023>I<133EA5137EA313FEA2120112031207121F
B61280A4D807FEC7FCB0EC07C0A70003EB0F8013FF6CEBFF006C5B6D5AEB0FF01A2F7EAE
22>I<B539E00FFFC0A4000790390001F8006C5D148015036C5DECC0076C5DECE00F017F
5CECF01F013F91C7FC6E5A011F133EECFC7E010F137CECFEFCA201075B14FF6D5BA26D5B
A26D5BA26E5AA26EC8FCA22A217EA02F>118 D<B539E00FFFC0A4000790390001F8006C
5D148015036C5DECC0076C5DECE00F017F5CECF01F013F91C7FC6E5A011F133EECFC7E01
0F137CECFEFCA201075B14FF6D5BA26D5BA26D5BA26E5AA26EC8FCA3143E147E147C003E
13FC007F5BEAFF81EB83F038F803E0130F38FC3FC0387FFF806C48C9FC6C5AEA07E02A30
7EA02F>121 D E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4

%%EndSetup
%%Page: 1 1
1 0 bop 639 3162 a
 currentpoint currentpoint translate 0.73154 0.73154 scale neg exch
neg exch translate
 639 3162 a 1039 -451 a
 tx@Dict begin tx@NodeDict begin {13.05 8.55 61.81815 30.90907 2.25
} false /N@Electricity 16 {InitRnode } NewNode end end
 1039 -451 a
56 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.3 true 6.8 neg 8.55
neg 55.01814 13.05 .5 Frame  gsave 1. setgray fill grestore gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 1095 -451
a
 0. setgray
 1095 -451 a Fd(Electricit)n(y)1496 -451 y
 0 setgray
 1496 -451
a 2927 -443 a
 tx@Dict begin tx@NodeDict begin {13.05 6.8 51.78563 25.8928 3.125
} false /N@Telecom 16 {InitRnode } NewNode end end
 2927 -443 a 57 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.3 true 6.8 neg 6.8
neg 44.98563 13.05 .5 Frame  gsave 1. setgray fill grestore gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore end


@endspecial 2984 -443 a
 0. setgray
 2984 -443 a Fd(T)-7 b(elecom)3304
-443 y
 0 setgray
 3304 -443 a 1547 1328 a
 tx@Dict begin tx@NodeDict begin {13.05 6.8 57.95224 28.97612 3.125
} false /N@AirTravel 16 {InitRnode } NewNode end end
 1547 1328 a 57 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.3 true 6.8 neg 6.8
neg 51.15224 13.05 .5 Frame  gsave 1. setgray fill grestore gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 1604 1328 a
 0. setgray
 1604 1328 a Fd(AirT)g(ra)n(v)n(el)
1975 1328 y
 0 setgray
 1975 1328 a 667 1328 a
 tx@Dict begin tx@NodeDict begin {13.05 6.8 32.67409 16.33704 3.125
} false /N@Rail 16 {InitRnode } NewNode end end
 667 1328 a 56 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.3 true 6.8 neg 6.8
neg 25.87408 13.05 .5 Frame  gsave 1. setgray fill grestore gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 723 1328 a
 0. setgray
 723 1328 a Fd(Rail)882
1328 y
 0 setgray
 882 1328 a 3402 1328 a
 tx@Dict begin tx@NodeDict begin {13.05 6.8 56.1774 28.0887 3.125 }
false /N@USBanks 16 {InitRnode } NewNode end end
 3402 1328 a 56 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.3 true 6.8 neg 6.8
neg 49.3774 13.05 .5 Frame  gsave 1. setgray fill grestore gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 3458 1328 a
 0. setgray
 3458 1328 a Fd(USBanks)3812
1328 y
 0 setgray
 3812 1328 a 2903 3099 a
 tx@Dict begin tx@NodeDict begin {13.05 6.8 57.63223 28.81612 3.125
} false /N@USStocks 16 {InitRnode } NewNode end end
 2903 3099 a 57 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.3 true 6.8 neg 6.8
neg 50.83223 13.05 .5 Frame  gsave 1. setgray fill grestore gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 2960 3099 a
 0. setgray
 2960 3099 a Fd(USSto)r(c)n(ks)3325
3099 y
 0 setgray
 3325 3099 a 2438 1328 a
 tx@Dict begin tx@NodeDict begin {13.05 6.8 50.98164 25.49081 3.125
} false /N@Utilities 16 {InitRnode } NewNode end end
 2438 1328 a 57 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.3 true 6.8 neg 6.8
neg 44.18164 13.05 .5 Frame  gsave 1. setgray fill grestore gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 2495 1328 a
 0. setgray
 2495 1328 a Fd(Utilities)2807
1328 y
 0 setgray
 2807 1328 a 949 3091 a
 tx@Dict begin tx@NodeDict begin {13.05 8.55 83.39854 41.69926 2.25
} false /N@Transportation 16 {InitRnode } NewNode end end
 949 3091 a 56 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.3 true 6.8 neg 8.55
neg 76.59854 13.05 .5 Frame  gsave 1. setgray fill grestore gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 1005 3091 a
 0. setgray
 1005 3091 a Fd(T)g(ransp)r
(ortation)1583 3091 y
 0 setgray
 1583 3091 a 803 3073 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.8  1.8  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@Electricity /N@Telecom InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 803 3073
a 803 3073 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.8  1.8  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@Electricity /N@AirTravel InitNC { NCLine  } if end gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 803 3073 a 803 3073 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.8  1.8  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@Electricity /N@Rail InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 803 3073 a 803 3073
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.8  1.8  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@Electricity /N@Utilities InitNC { NCLine  } if end gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 803 3073 a 803 3073 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.8  1.8  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@Telecom /N@USBanks InitNC { NCLine  } if end gsave 0.8 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 803 3073 a 803 3073 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.8  1.8  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@Telecom /N@Utilities InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 803 3073
a 803 3073 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.8  1.8  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@AirTravel /N@Transportation InitNC { NCLine  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 803 3073 a 803 3073 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.8  1.8  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@Rail /N@Transportation InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 803 3073 a 803 3073
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.8  1.8  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@USBanks /N@USStocks InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 803 3073 a 803 3073 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.8  1.8  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@Utilities /N@USStocks InitNC { NCLine  } if end gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 803 3073 a 803 3073 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.8  1.8  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@Transportation /N@USStocks InitNC { NCLine  } if end gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 803 3073
a 1039 -451 a
 tx@Dict begin tx@NodeDict begin {13.05 8.55 61.81815 30.90907 2.25
} false /N@Electricity 16 {InitRnode } NewNode end end
 1039 -451 a 56 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.3 true 6.8 neg 8.55
neg 55.01814 13.05 .5 Frame  gsave 1. setgray fill grestore gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore end


@endspecial 1095 -451 a
 0. setgray
 1095 -451 a Fd(Electricit)n(y)1496
-451 y
 0 setgray
 1496 -451 a 2927 -443 a
 tx@Dict begin tx@NodeDict begin {13.05 6.8 51.78563 25.8928 3.125
} false /N@Telecom 16 {InitRnode } NewNode end end
 2927 -443 a 57 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.3 true 6.8 neg 6.8
neg 44.98563 13.05 .5 Frame  gsave 1. setgray fill grestore gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 2984 -443 a
 0. setgray
 2984 -443 a Fd(T)g(elecom)3304
-443 y
 0 setgray
 3304 -443 a 1547 1328 a
 tx@Dict begin tx@NodeDict begin {13.05 6.8 57.95224 28.97612 3.125
} false /N@AirTravel 16 {InitRnode } NewNode end end
 1547 1328 a 57 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.3 true 6.8 neg 6.8
neg 51.15224 13.05 .5 Frame  gsave 1. setgray fill grestore gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 1604 1328 a
 0. setgray
 1604 1328 a Fd(AirT)g(ra)n(v)n(el)
1975 1328 y
 0 setgray
 1975 1328 a 667 1328 a
 tx@Dict begin tx@NodeDict begin {13.05 6.8 32.67409 16.33704 3.125
} false /N@Rail 16 {InitRnode } NewNode end end
 667 1328 a 56 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.3 true 6.8 neg 6.8
neg 25.87408 13.05 .5 Frame  gsave 1. setgray fill grestore gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 723 1328 a
 0. setgray
 723 1328 a Fd(Rail)882
1328 y
 0 setgray
 882 1328 a 3402 1328 a
 tx@Dict begin tx@NodeDict begin {13.05 6.8 56.1774 28.0887 3.125 }
false /N@USBanks 16 {InitRnode } NewNode end end
 3402 1328 a 56 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.3 true 6.8 neg 6.8
neg 49.3774 13.05 .5 Frame  gsave 1. setgray fill grestore gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 3458 1328 a
 0. setgray
 3458 1328 a Fd(USBanks)3812
1328 y
 0 setgray
 3812 1328 a 2903 3099 a
 tx@Dict begin tx@NodeDict begin {13.05 6.8 57.63223 28.81612 3.125
} false /N@USStocks 16 {InitRnode } NewNode end end
 2903 3099 a 57 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.3 true 6.8 neg 6.8
neg 50.83223 13.05 .5 Frame  gsave 1. setgray fill grestore gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 2960 3099 a
 0. setgray
 2960 3099 a Fd(USSto)r(c)n(ks)3325
3099 y
 0 setgray
 3325 3099 a 2438 1328 a
 tx@Dict begin tx@NodeDict begin {13.05 6.8 50.98164 25.49081 3.125
} false /N@Utilities 16 {InitRnode } NewNode end end
 2438 1328 a 57 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.3 true 6.8 neg 6.8
neg 44.18164 13.05 .5 Frame  gsave 1. setgray fill grestore gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 2495 1328 a
 0. setgray
 2495 1328 a Fd(Utilities)2807
1328 y
 0 setgray
 2807 1328 a 949 3091 a
 tx@Dict begin tx@NodeDict begin {13.05 8.55 83.39854 41.69926 2.25
} false /N@Transportation 16 {InitRnode } NewNode end end
 949 3091 a 56 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.3 true 6.8 neg 8.55
neg 76.59854 13.05 .5 Frame  gsave 1. setgray fill grestore gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 1005 3091 a
 0. setgray
 1005 3091 a Fd(T)g(ransp)r
(ortation)1583 3091 y
 0 setgray
 1583 3091 a 639 3162 a
 currentpoint currentpoint translate 1 0.73154 div 1 0.73154 div scale
neg exch neg exch translate
 639 3162
a 1926 5255 a Fc(1)p eop
%%Page: 2 2
2 1 bop 515 3015 a
 currentpoint currentpoint translate 0.63232 0.63232 scale neg exch
neg exch translate
 515 3015 a 675 997 a
 tx@Dict begin tx@NodeDict begin {} false /N@ElectricityTransportationRailAirTravel
14 {/X 36.7269 def /Y 2.25 def /w 52.73189 def /h 31.90804 def /NodePos
{ OvalNodePos } def} NewNode end end
 675 997 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0 360 52.73189 CLW 2
div sub 31.90804 CLW 2 div sub 36.7269 2.25 Ellipse closepath gsave
1. setgray fill grestore gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore end
 
@endspecial 675 997 a
 1. setgray
 675 997 a Fb(bp)681
997 y
 0. setgray
 681 997 a 810 860 a Fb(Electricit)n(y)731 951 y(T)-6
b(ransp)r(ortation)914 1043 y(Rail)824 1134 y(AirT)g(ra)n(v)n(el)1285
997 y
 0 setgray
 1285 997 a 1285 997 a
 0 setgray
 1285 997 a 3508 2769 a
 tx@Dict begin tx@NodeDict begin {} false /N@USBanksUtilitiesTransportationUSStocks
14 {/X 36.7269 def /Y 2.25 def /w 52.73189 def /h 31.90804 def /NodePos
{ OvalNodePos } def} NewNode end end
 3508
2769 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0 360 52.73189 CLW 2
div sub 31.90804 CLW 2 div sub 36.7269 2.25 Ellipse closepath gsave
1. setgray fill grestore gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore end
 
@endspecial 3508 2769
a
 1. setgray
 3508 2769 a Fb(bp)3514 2769 y
 0. setgray
 3514 2769 a 3663 2631
a Fb(USBanks)3682 2722 y(Utilities)3564 2814 y(T)g(ransp)r(ortation)
3658 2905 y(USSto)r(c)n(ks)4118 2769 y
 0 setgray
 4118 2769 a 4118
2769 a
 0 setgray
 4118 2769 a 3587 -774 a
 tx@Dict begin tx@NodeDict begin {} false /N@ElectricityUSBanksUtilitiesTelecom
14 {/X 27.24951 def /Y 2.25 def /w 39.33086 def /h 31.90804 def /NodePos
{ OvalNodePos } def} NewNode end end
 3587 -774 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0 360 39.33086 CLW 2
div sub 31.90804 CLW 2 div sub 27.24951 2.25 Ellipse closepath gsave
1. setgray fill grestore gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore end
 
@endspecial 3587 -774 a
 1. setgray
 3587 -774 a Fb(bp)3593
-774 y
 0. setgray
 3593 -774 a 3642 -911 a Fb(Electricit)n(y)3663
-820 y(USBanks)3682 -728 y(Utilities)3678 -637 y(T)g(elecom)4039
-774 y
 0 setgray
 4039 -774 a 4039 -774 a
 0 setgray
 4039 -774 a 2572 997 a
 tx@Dict begin tx@NodeDict begin {} false /N@UtilitiesUSBanksTransportationElectricity
14 {/X 36.7269 def /Y 2.25 def /w 52.73189 def /h 31.90804 def /NodePos
{ OvalNodePos } def} NewNode end end

2572 997 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0 360 52.73189 CLW 2
div sub 31.90804 CLW 2 div sub 36.7269 2.25 Ellipse closepath gsave
1. setgray fill grestore gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore end
 
@endspecial 2572
997 a
 1. setgray
 2572 997 a Fb(bp)2578 997 y
 0. setgray
 2578 997 a 2746 860
a Fb(Utilities)2727 951 y(USBanks)2628 1043 y(T)g(ransp)r(ortation)2706
1134 y(Electricit)n(y)3182 997 y
 0 setgray
 3182 997 a 3182 997
a
 0 setgray
 3182 997 a 980 2750 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@ElectricityTransportationRailAirTravel /N@UtilitiesUSBanksTransportationElectricity
InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 980 2750 a 980 2750 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 980 2750
a 699 2766 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.0 SLW 1. setgray  0. true 3.0 neg 10.49998
neg 70.78413 14.49998 .5 Frame  gsave 1. setgray fill grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0. true 2.8 neg 10.29999
neg 70.58414 14.29999 .5 Frame  gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 821 2726 a Fa(Electricit)n(y)749
2805 y(T)g(ransp)r(ortation)980 2750 y
 tx@Dict begin PutEnd  end
 980 2750 a 980
2750 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@USBanksUtilitiesTransportationUSStocks /N@UtilitiesUSBanksTransportationElectricity
InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 980 2750 a 980 2750 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 980 2750 a 699 2766 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.0 SLW 1. setgray  0. true 3.0 neg 15.24997
neg 70.78413 19.24998 .5 Frame  gsave 1. setgray fill grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0. true 2.8 neg 15.04997
neg 70.58414 19.04999 .5 Frame  gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial
839 2687 a Fa(USBanks)858 2766 y(Utilities)749 2844 y(T)g(ransp)r
(ortation)980 2750 y
 tx@Dict begin PutEnd  end
 980 2750 a 980 2750 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@ElectricityUSBanksUtilitiesTelecom /N@UtilitiesUSBanksTransportationElectricity
InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 980 2750 a
980 2750 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 980 2750 a 771 2766 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.0 SLW 1. setgray  0. true 3.0 neg 15.24997
neg 53.37138 19.24998 .5 Frame  gsave 1. setgray fill grestore end


@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0. true 2.8 neg 15.04997
neg 53.17139 19.04999 .5 Frame  gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 821
2687 a Fa(Electricit)n(y)839 2766 y(USBanks)858 2844
y(Utilities)980 2750 y
 tx@Dict begin PutEnd  end
 980 2750 a 675 997 a
 tx@Dict begin tx@NodeDict begin {} false /N@ElectricityTransportationRailAirTravel
14 {/X 36.7269 def /Y 2.25 def /w 52.73189 def /h 31.90804 def /NodePos
{ OvalNodePos } def} NewNode end end
 675 997 a
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0 360 52.73189 CLW 2
div sub 31.90804 CLW 2 div sub 36.7269 2.25 Ellipse closepath gsave
1. setgray fill grestore gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore end
 
@endspecial 675 997 a
 1. setgray
 675
997 a Fb(bp)681 997 y
 0. setgray
 681 997 a 810 860 a Fb(Electricit)n(y)731
951 y(T)g(ransp)r(ortation)914 1043 y(Rail)824 1134 y(AirT)g(ra)n(v)n
(el)1285 997 y
 0 setgray
 1285 997 a 1285 997 a
 0 setgray
 1285 997 a 3508
2769 a
 tx@Dict begin tx@NodeDict begin {} false /N@USBanksUtilitiesTransportationUSStocks
14 {/X 36.7269 def /Y 2.25 def /w 52.73189 def /h 31.90804 def /NodePos
{ OvalNodePos } def} NewNode end end
 3508 2769 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0 360 52.73189 CLW 2
div sub 31.90804 CLW 2 div sub 36.7269 2.25 Ellipse closepath gsave
1. setgray fill grestore gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore end
 
@endspecial
3508 2769 a
 1. setgray
 3508 2769 a Fb(bp)3514 2769 y
 0. setgray
 3514 2769 a
3663 2631 a Fb(USBanks)3682 2722 y(Utilities)3564 2814
y(T)g(ransp)r(ortation)3658 2905 y(USSto)r(c)n(ks)4118
2769 y
 0 setgray
 4118 2769 a 4118 2769 a
 0 setgray
 4118 2769 a 3587 -774
a
 tx@Dict begin tx@NodeDict begin {} false /N@ElectricityUSBanksUtilitiesTelecom
14 {/X 27.24951 def /Y 2.25 def /w 39.33086 def /h 31.90804 def /NodePos
{ OvalNodePos } def} NewNode end end
 3587 -774 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0 360 39.33086 CLW 2
div sub 31.90804 CLW 2 div sub 27.24951 2.25 Ellipse closepath gsave
1. setgray fill grestore gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore end
 
@endspecial
3587 -774 a
 1. setgray
 3587 -774 a Fb(bp)3593 -774 y
 0. setgray
 3593 -774 a
3642 -911 a Fb(Electricit)n(y)3663 -820 y(USBanks)3682
-728 y(Utilities)3678 -637 y(T)g(elecom)4039 -774 y
 0 setgray
 4039
-774 a 4039 -774 a
 0 setgray
 4039 -774 a 2572 997 a
 tx@Dict begin tx@NodeDict begin {} false /N@UtilitiesUSBanksTransportationElectricity
14 {/X 36.7269 def /Y 2.25 def /w 52.73189 def /h 31.90804 def /NodePos
{ OvalNodePos } def} NewNode end end
 2572 997 a
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0 360 52.73189 CLW 2
div sub 31.90804 CLW 2 div sub 36.7269 2.25 Ellipse closepath gsave
1. setgray fill grestore gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore end
 
@endspecial 2572 997 a
 1. setgray
 2572
997 a Fb(bp)2578 997 y
 0. setgray
 2578 997 a 2746 860 a Fb(Utilities)2727
951 y(USBanks)2628 1043 y(T)g(ransp)r(ortation)2706 1134
y(Electricit)n(y)3182 997 y
 0 setgray
 3182 997 a 3182 997 a
 0 setgray
 3182
997 a 515 3015 a
 currentpoint currentpoint translate 1 0.63232 div 1 0.63232 div scale
neg exch neg exch translate
 515 3015 a 1926 5255 a Fc(2)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
